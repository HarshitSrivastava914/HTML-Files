// Import necessary modules
const express = require("express");
const bodyParser = require("body-parser");
const crypto = require("crypto");

const app = express();

// Middleware to parse JSON and raw bodies
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Razorpay credentials
const RAZORPAY_KEY_ID = "rzp_live_vMEQB5sXAQr4us"; // Replace with your Razorpay Key ID
//const RAZORPAY_KEY_SECRET = "UyjqOzI0u61YS5lpwL4aJM9X"; // Replace with your Razorpay Key Secret

// Serve the Razorpay Checkout page
app.get("/", (req, res) => {
  const html = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Razorpay Payment</title>
    </head>
    <body>
        <button id="rzp-button1">Pay</button>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>
            var options = {
                "key": "${RAZORPAY_KEY_ID}",
                "amount": "1000", // Amount in smallest currency unit
                "currency": "INR",
                //"name": "Acme Corp",
                //"description": "Test Transaction",
                //"image": "https://example.com/your_logo",
                "order_id": "order_PsPQ3eEo4GlAFg", // Replace with your generated order ID
                "handler": function (response) {
                    alert('Payment ID: ' + response.razorpay_payment_id);
                    alert('Order ID: ' + response.razorpay_order_id);
                    alert('Signature: ' + response.razorpay_signature);
                },
                // "prefill": {
                //     "name": "John Doe",
                //     "email": "john.doe@example.com",
                //     "contact": "9000090000"
                // },
                // "theme": {
                //     "color": "#3399cc"
                // }
            };
            var rzp1 = new Razorpay(options);
            rzp1.on('payment.failed', function (response) {
                alert('Payment Failed');
                console.error(response.error);
            });
            document.getElementById('rzp-button1').onclick = function(e) {
                rzp1.open();
                e.preventDefault();
            }
        </script>
    </body>
    </html>
    `;
  res.send(html);
});

// Webhook endpoint for Razorpay
app.post("/webhook", (req, res) => {
  const webhookSecret = "testing"; // Replace with your webhook secret
  const receivedSignature = req.headers["x-razorpay-signature"]; // Signature sent by Razorpay
  const payload = JSON.stringify(req.body); // Raw body of the webhook request

  // Generate expected signature
  let expectedSignature = crypto
    .createHmac("sha256", webhookSecret)
    .update(payload)
    .digest("hex");

  // Verify the signature
  if (
    crypto.timingSafeEqual(
      Buffer.from(expectedSignature),
      Buffer.from(receivedSignature)
    )
  ) {
    console.log("Webhook signature verified successfully");
    console.log("Recieved Signature: " + receivedSignature);
    console.log("  ");
    console.log("Expected Signature: " + expectedSignature);
    res.status(200).send("Webhook verified");
  } else {
    console.error("Invalid webhook signature");
    console.log("Recieved Signature: " + receivedSignature);
    console.log("  ");
    console.log("Expected Signature: " + expectedSignature);
    res.status(400).send("Invalid signature");
  }
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

// How It Works
// Payment Page:

// When you visit http://localhost:3000, it serves an HTML page with Razorpay Checkout integration.
// Replace order_9A33XWu170gUtm with the actual order ID generated by Razorpay from your backend.
// Webhook Verification:

// Razorpay will send a webhook to the /webhook endpoint with a signature in the x-razorpay-signature header.
// The server verifies the signature using HMAC with the sha256 algorithm and the webhook secret.
// Environment-Specific Keys:

// Replace placeholders (YOUR_KEY_ID, YOUR_KEY_SECRET, and YOUR_WEBHOOK_SECRET) with your Razorpay credentials.
// Running the File:

// Save the file as payment_and_webhook.js.
// Install dependencies:
// bash
// Copy
// Edit
// npm install express body-parser crypto
// Run the server:
// bash
// Copy
// Edit
// node payment_and_webhook.js
// Testing Webhook Verification:

// Use a tool like ngrok to expose your local server to the internet:
// bash
// Copy
// Edit
// ngrok http 3000
// Set the webhook URL in Razorpay to the ngrok URL followed by /webhook.
